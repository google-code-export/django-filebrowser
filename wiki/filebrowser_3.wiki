This page is a preliminary documentation on Version 3.0 of the !FileBrowser. The behaviour can slightly change within the next couple of weeks.<br><br>
----
<br>
=Release Notes=
A lot has changed with Version 3.0 of the !FileBrowser. Here´s a list with the most important changes:
  * New !FileObject.
  * Versions are generated "on the fly" - generating Versions on Upload is no longer necessary/possible.
  * New URL configuration: Directories are now passed via query-string. So, the restriction for folder-names (DISALLOWED_FOLDER_NAMES) is gone.
  * !FileBrowseField returns a !FileObject (instead of a string).
  * New attribute "format" for !FileBrowseField. With using "format", it´s possible to limit the selection to different filetypes.
  * Versions/Thumbnails can be stored in a seperate directory.
  * Overwrite files on Upload (filename is checked via ajax).
  * sorl-thumbnail is no longer needed.
  * DEBUG-Mode in order to display !FileObjects in the Admin-Interface.
  * Some settings have changed (see Available Settings).
  * New Version-settings should be more flexible.
  * Code is much cleaner (although far from hugely satisfying).
  * Using Uploadify (including an Upload Progress Bar and better error-handling).

What we like to implement, but didn´t make with this version:
  * Traversing Directories when Searching for Filenames.
  * Use !FileBrowser Models in order to define every Model-Field which can include a File. These Fields will then be searched when a File is renamed or deleted.
<br>
----
<br>
=Requirements=

    * Django 1.0+
    * PIL (Python Imaging Library), see http://www.pythonware.com/products/pil/

Note: sorl-thumbnail is no longer required.
<br><br>
----
<br>
=Basic Installation=

  # *Install the !FileBrowser*
    Install the !FileBrowser anywhere on your python-path. I´m personally using the project-directory.
{{{
svn checkout http://django-filebrowser.googlecode.com/svn/branches/filebrowser_3/filebrowser/ filebrowser
}}}
  # *Copy Media*
    Copy the folder /media to your media-directory and change URL_FILEBROWSER_MEDIA (in fb_settings.py) accordingly.
  # *Add filebrowser to your INSTALLED APPS.*
    Open your projects settings-file (settings.py) and add the filebrowser to your INSTALLED APPS. 
  # *Change fb_settings.py*
    Either change fb_settings.py or overwrite the filebrowser settings in your project settings-file (settings.py). See "Available Settings".
  # *Change your urls.py*
    Add the following line BEFORE the admin-urls:
{{{
(r'^admin/filebrowser/', include('filebrowser.urls')),
}}}
  # *Add the !FileBrowser to your Admin Indexpage*
    Edit /templates/admin/index.html. Add this code BEFORE {% for app in app_list %} ... {% endfor %}:
{{{
{% include "filebrowser/append.html" %}
}}}
  # That's it.
<br>
----
<br>
= Available Settings =

All Settings can be defined in your projects settings-file (settings.py) or the !FileBrowsers settings-file (fb_settings.py). When using the projects settings-file, you have to use the prefix "FILEBROWSER" for every setting (e.g. FILEBROWSER_MEDIA_URL instead of MEDIA_URL).
=== DEBUG ==
Set to True in order to get an additional column with the fileobjects data.
{{{
DEBUG = getattr(settings, "FILEBROWSER_DEBUG", False)
}}}
=== MAIN URL/PATH SETTINGS ===
The absolute path to the directory that holds your media-files.
{{{
MEDIA_ROOT = getattr(settings, "FILEBROWSER_MEDIA_ROOT", settings.MEDIA_ROOT)
}}}
URL that handles the media served from MEDIA_ROOT.
{{{
MEDIA_URL = getattr(settings, "FILEBROWSER_MEDIA_URL", settings.MEDIA_URL)
}}}
Main !FileBrowser Directory. This has to be a directory within MEDIA_ROOT. Leave empty in order to browse all files under MEDIA_ROOT.
{{{
DIRECTORY = getattr(settings, "FILEBROWSER_DIRECTORY", 'uploads/')
}}}
=== FILEBROWSER_MEDIA & TINYMCE_MEDIA ===
The URL and Path to your !FileBrowser media-files. You have to change this settings, if you install the media-files of the !FileBrowser outside your admin-media directory.
{{{
URL_FILEBROWSER_MEDIA = getattr(settings, "FILEBROWSER_URL_FILEBROWSER_MEDIA", settings.ADMIN_MEDIA_PREFIX + "filebrowser/")
PATH_FILEBROWSER_MEDIA = getattr(settings, "FILEBROWSER_PATH_MEDIA", settings.ADMIN_MEDIA_PREFIX + "filebrowser/")
}}}
The URL to your TinyMCE Installation. You have to change this settings, if you install TinyMCE outside your admin-media directory.
{{{
URL_TINYMCE = getattr(settings, "FILEBROWSER_URL_TINYMCE", settings.ADMIN_MEDIA_PREFIX + "tinymce/jscripts/tiny_mce/")
PATH_TINYMCE = getattr(settings, "FILEBROWSER_PATH_TINYMCE", settings.ADMIN_MEDIA_PREFIX + "tinymce/jscripts/tiny_mce/")
}}}
=== EXTENSIONS & SELECT_FORMATS ===
Allowed Extensions for File Upload. Please be aware that there are Icons for the default extension settings. If you rename "Sound" to "Music", you also have to rename the Sound-Icon within the img-directory.
{{{
EXTENSIONS = getattr(settings, "FILEBROWSER_EXTENSIONS", {
    'Folder':[''],
    'Image':['.jpg', '.jpeg', '.gif','.png','.tif','.tiff'],
    'Video':['.mov','.wmv','.mpeg','.mpg','.avi','.rm'],
    'Document':['.pdf','.doc','.rtf','.txt','.xls','.csv'],
    'Sound':['.mp3','.mp4','.wav','.aiff','.midi','.m4p'],
    'Code':['.html','.py','.js','.css']
})
}}}
Set different Options for selecting elements from the !FileBrowser.
{{{
SELECT_FORMATS = getattr(settings, "FILEBROWSER_SELECT_FORMATS", {
    'File': ['Folder','Document',],
    'Image': ['Image'],
    'Media': ['Video','Sound'],
    'Document': ['Document'],
    # for TinyMCE we also have to define lower-case items
    'image': ['Image'],
    'file': ['Folder','Image','Document',],
})
}}}
=== VERSIONS_BASEDIR & VERSIONS ==
{{{
VERSIONS_BASEDIR = getattr(settings, 'FILEBROWSER_VERSIONS_BASEDIR', '_versions_')
}}}
{{{
VERSIONS = getattr(settings, "FILEBROWSER_VERSIONS", {
    'fb_thumb': {'verbose_name': 'Admin Thumbnail', 'width': 60, 'height': 60, 'opts': 'crop upscale'},
    'thumbnail': {'verbose_name': 'Thumbnail (140px)', 'width': 140, 'height': '', 'opts': ''},
    'small': {'verbose_name': 'Small (300px)', 'width': 300, 'height': '', 'opts': ''},
    'medium': {'verbose_name': 'Medium (460px)', 'width': 460, 'height': '', 'opts': ''},
    'big': {'verbose_name': 'Big (620px)', 'width': 620, 'height': '', 'opts': ''},
    'cropped': {'verbose_name': 'Cropped (60x60px)', 'width': 60, 'height': 60, 'opts': 'crop'},
    'croppedthumbnail': {'verbose_name': 'Cropped Thumbnail (140x140px)', 'width': 140, 'height': 140, 'opts': 'crop'},
})
}}}
{{{
ADMIN_VERSIONS = getattr(settings, 'FILEBROWSER_ADMIN_VERSIONS', ['thumbnail','small', 'medium','big'])
ADMIN_THUMBNAIL = getattr(settings, 'FILEBROWSER_ADMIN_THUMBNAIL', 'fb_thumb')
}}}
=== OPTIONAL SETTINGS ===
*SAVE_FULL_URL: *True to save the URL including MEDIA_URL to your model fields or False (default) to save path relative to MEDIA_URL.
{{{
SAVE_FULL_URL = getattr(settings, "FILEBROWSER_SAVE_FULL_URL", True)
}}}
*STRICT_PIL:* If set to True, then !FileBrowser will not try to import a mis-installed PIL.
{{{
STRICT_PIL = getattr(settings, 'FILEBROWSER_STRICT_PIL', False)
}}}
*IMAGE_MAXBLOCK:* see http://mail.python.org/pipermail/image-sig/1999-August/000816.html
{{{
IMAGE_MAXBLOCK = getattr(settings, 'FILEBROWSER_IMAGE_MAXBLOCK', 1024*1024)
}}}
*EXCLUDE:*
{{{
EXCLUDE = getattr(settings, 'FILEBROWSER_EXCLUDE', (r'_(jpg|png|gif)_.*_q\d{1,3}\.(jpg|png|gif)', ))
}}}
*MAX_UPLOAD_SIZE:* Max. Upload Size in Bytes.
{{{
MAX_UPLOAD_SIZE = getattr(settings, "FILEBROWSER_MAX_UPLOAD_SIZE", 10485760)
}}}
*CONVERT_FILENAME:* replace spaces and convert to lowercase
{{{
CONVERT_FILENAME = getattr(settings, "FILEBROWSER_CONVERT_FILENAME", True)
}}}
<br>
----
<br>
=The !FileObject=
New in Version 3.0: When browsing a directory on the server, you get a !FileObject (see base.py) for every file within that directory.

Any !FileObject has the following attributes:
  * *filename*
  * *filetype* (as defined in EXTENSIONS)
  * *filesize* (output with filesizeformat)
  * *extension* (as defined in EXTENSIONS)
  * *date* (getmtime)
  * *datetime* (datetime object)

  * *path* (relative to MEDIA_ROOT)
  * *path_relative* (=path)
  * *path_full* (including MEDIA_ROOT)
  * *url_relative* (=path)
  * *url_full* (including MEDIA__URL)
  * *url_save* (URL used for the !FileBrowseField)
  * *url_thumbnail* (Full URL for the Admin-Thumbnail)

An Image has additional attributes:
  * *dimensions* (tuple)
  * *orientation* (either "landscape" or "portrait")
  * *width* (in px)
  * *height* (in px)

A Folder has additional attributes:
  * *is_empty* (True/False)

Set DEBUG to True in order to see the !FileObject values.
<br><br>
----
<br>
=Using the !FileBrowseField=

The !FileBrowseField is a Model field (see http://docs.djangoproject.com/en/dev/ref/models/fields/#field-types for other field types) used to select a File/Document/Image/Folder from your Media Server.

  # *Define your models like this*
{{{
from filebrowser.fields import FileBrowseField

class Publication(models.Model):
    ...
    image = FileBrowseField("Image", max_length=200, blank=True, null=True)
    image_initialdir = FileBrowseField("Image (Initial Directory)", max_length=200, directory="images/", blank=True, null=True)
    image_extensions = FileBrowseField("Image (Extensions)", max_length=200, extensions=['.jpg'], help_text="Only jpg-Images allowed.", blank=True, null=True)
    image_format = FileBrowseField("Image (Format)", max_length=200, format='Image', blank=True, null=True)
    pdf = FileBrowseField("PDF", max_length=200, directory="documents/", extensions=['.pdf'], format='Document', blank=True, null=True)
    ...
}}}

=== Attributes for the !FileBrowseField ===
  * *max_length*
    Since the !FileBrowseField is basically a !CharField, you have to define max_length.
  * *directory*
    Subdirectory of DIRECTORY (see fb_settings.py). If DIRECTORY is not defined, subdirectory of MEDIA_ROOT. Do not prepend a slash.
  * *extensions*
    List of Extensions allowed for this Field. Users will get an error message ("Extension not allowed.") if the selected File has an extension not listed here. Extensions are automatically converted to lowercase - therefore, you don´t have to define '.JPG' and '.jpg', but only '.jpg'.
  * *format*
    Use this attribute to restrict selection to specific filetypes. E.g., if you use *format='Image'*, only Images can be selected from the !FileBrowser. Note: The Format has to be defined within SELECT_FORMATS.

=== Image Preview ===
The Thumbnail will automatically be generated. Clicking on the Thumbnail below the !FileBrowseField will open the Image in a new window/tab.

=== !FileBrowseField in Templates ===
When using a !FileBrowseField, you´ll get a !FileObject back (see !FileObject).

With the above Publication-Model, you can use
{{{
{{ publication.image }}
}}}
to output the contents of your image-field. For example, this could result in something like "uploads/images/myimage.jpg".

Now, if you want to actually display the Image, you write:
{{{
<img src="{{ publication.image }}" class="ImageClass" />
}}}

More complicated, if you want to display "Landscape" Images only (I know, bad example):
{{{
{% ifequal publication.image.image_orientation "landscape" %}
<img src="{{ publication.image }}" class="ImageClass" />
{% endifequal %}
}}}

=== Showing Thumbnail in the Changelist ===
If you want to show a Thumbnail in the Changelist, you can define a Model-/Admin-Method:
{{{
def image_thumbnail(self):
    if self.image:
        return '<img src="%s" />' % self.image.url_thumbnail
    else:
        return ""
image_thumbnail.allow_tags = True
}}}
<br>
----
<br>
= Templatetags =
New in Version 3.0: Instead of Generating Image-Versions on Upload, the Versions are now generated "on the fly" with using Templatetags.

First you need to load the templatetags with
{{{
{% load fb_versions %}
}}}

You have two different tags to choose from: *version* and *version_object*.

=== version ===
Get the URL for a version of an existing Image according to the predefined VERSIONS settings (see fb_settings).
{{{
{% version field_name version_prefix %}
}}}    
Given our Publication-Model form abeove, use
{{{
{% version publication.image.path 'medium' %}
}}}
in order to display the URL to your medium-size version.

Note: version_prefix can either be a string or a variable. If version_prefix is a string, use quotes.
=== version_object ===
Sometimes getting the URL to your version may not be enough. In this case, use version_object in order to return a !FileObject.
{{{
{% version_object field_name version_prefix as variable %}
}}}    
With our Publication-Model, use 
{{{
{% version_object my_image 'medium' as version_medium %} 
}}}
in order to retrieve the !FileObject for the medium version.

With the !FileObject in your Template-Context you can now type (for example):
{{{
{{ version_medium.width }}
}}}
or just
{{{
<img src="{{ version_medium }}" />
}}}

A complete (and more complex) example #001:
{{{
{% for publication in publication_list %}
   {% ifequal publication.image.orientation 'lancscape' %}
      <p><img src="{{ version publication.image 'medium' }}" /></p>
   {% else %}
      <p><img src="{{ version publication.image 'medium_portrait' }}" /></p>
   {% endifequal %}
{% endfor %}
}}}

=== Behind the Scenes ===
With either using the version-tag or the version_object-tag, the Image-version will be generated "on the fly" if the version doesn´t already exist OR if the original Image is newer than the version.
This means that if you´d like to update an Image, you just overwrite the original Image - the versions will be re-generated automatically (as you request them within your template).
<br>
----
<br>
= Signals =
The !FileBrowser sends to signals when uploading a File:
  * *upload_started*
    This Signal is sent _before_ a File is uploaded to the Server.<br>
    kwargs: folder, path, file
  * *upload_finished*
    This Signal is sent _after_ a File has been uploaded to the Server.<br>
    kwargs: folder, path, file

Example for using these Signals:
{{{
from filebrowser.views import upload_started, upload_finished


def pre_upload_callback(sender, **kwargs):
    """
    Receiver function called each time an upload starts.
    kwargs: folder, path, file
    """
    print "Pre Upload Callback"
    print "kwargs:", kwargs
    print "Folder:", kwargs['folder']
    print "Path:", kwargs['path']
    print "File:", kwargs['file']
upload_started.connect(pre_upload_callback)


def post_upload_callback(sender, **kwargs):
    """
    Receiver function called each time an upload has finished.
    kwargs: folder, path, file
    """
    print "Post Upload Callback"
    print "kwargs:", kwargs
    print "Folder:", kwargs['folder']
    print "Path:", kwargs['path']
    print "File:", kwargs['file']
    # You can use all attributes available with the FileObject
    # This is just an example ...
    print "Filesize:", kwargs['file'].filesize
    print "Orientation:", kwargs['file'].orientation
    print "Extension:", kwargs['file'].extension
upload_finished.connect(post_upload_callback)
}}}
----
<br>
= Notes =
When you rename or delete a File on your server, you have to be cautious: the Path/URL for this File (or the Path/URL for a Version, if it is an Image) could be stored in your database with either a !FileBrowseField or within a !TextField.
E.g., if you rename a File, the stored Path/URL is not correct anymore!